package esri.tasks;

import js.Dom;
/* <i>Class added v2.6</i><br/> Create an algorithmic color
        ramp to define the range of colors used in the renderer generated by the
        <a href='../jsapi_start.htm#jsapi/generaterenderertask.htm'>GenerateRendererTask</a>.
        The algorithmic color ramp is defined by specifying two colors and the
        algorithm used to traverse the intervening color spaces. Specify the from
        and to colors using <a target='_blank' href="http://dojotoolkit.org/reference-guide/dojo/Color.html">dojo.color</a>.
        <p>There are three algorithms that can be used to define the color
        values between the from and to colors: 'cie-lab', 'hsv',
        and 'lab-lch'. There is very little difference between these
        algorithms when the from and the to colors are of the same or very similar
        hues. But when the hues for the from and to colors are different (Hue is
        different by 40 or more on a 0-360 scale), the algorithms produce different
        results. The 'hsv' algorithim traverses the hue difference in
        a purely linear fashion, resulting in a bright ramp where all intermediate
        colors are represented. For instance, a ramp from red to green would include
        orange, yellow, and yellow-green. The 'cie-lab' and 'lab-lch'
        produce a more blended result. Thus, a ramp from dark green to orange would
        not contain a bright yellow, but instead a more brown and green-gold or
        green-brown intermediate color. The advantage of the 'cie-lab'
        algorithm is that the colors of the ramp are visually equidistant, which
        can produce a better ramp. </p> <center> <img alt='Algorithmic
        Color Ramp Example' src='images/algocolorramps.png'/>
        </center>*/
@native ("esri.tasks.AlgorithmicColorRamp")
extern class AlgorithmicColorRamp {
	/* The algorithim used to generate the colors between the <code>fromColor</code>
            and <code>toColor</code>. Each algorithim uses different methods
            for generating the intervening colors. <table class='detailTABLE'>
            <tr> <td class='detailTABLE'>cie-lab</td> <td
            class='detailTABLE'>Blends the from and to colors without
            traversing the intervening hue space.</td> </tr> <tr>
            <td class='detailTABLE'>lab-lch</td> <td class='detailTABLE'>The
            hue, saturation, value (hsv) algorithm is a linear traverse of colors between
            pairs: Color 1 H to Color 2 H, Color 1 S to Color 2 S, and Color 1 V to
            Color 2 V.</td> </tr> <tr> <td class='detailTABLE'>hsv</td>
            <td class='detailTABLE'>The lab-lch algorithm is very similar
            to the cie-lab but does not seek the shortest path between colors.</td>
            </tr> </table> <br/>Known values: cie-lab | hsv | lab-lch*/
	public var algorithim:String;
	/* The first color in the color ramp.*/
	public var fromColor:Dynamic;
	/* The last color in the color ramp.*/
	public var toColor:Dynamic;


	/* Returns an easily serializable object representation of an algorithmic
            color ramp.*/
	public function toJson():Dynamic;
	function new():Void;
}